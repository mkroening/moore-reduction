{"version":3,"sources":["webpack://moore-simplification/./src/components/output/EquivalencePartitionTable.js"],"names":["styles","tableWrapper","overflowX","rowGrey","backgroundColor","grey","EquivalencePartitionTable","render","this","props","states","classes","variant","equivalence","className","size","Array","from","length","nextStates","v","k","key","toString","InlineMath","String","raw","map","state","index","equivalencePartition","number","output","React","withStyles"],"mappings":"iSAmBMA,EAAU,CACZC,aAAc,CACVC,UAAW,QAEfC,QAAS,CACLC,gBAAiBC,iBAInBC,E,6FACFC,OAAA,WACI,MAA0BC,KAAKC,MAAxBC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QACf,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAYC,QAAQ,MACfF,EAAOG,YADZ,4BAIJ,uBAAKC,UAAWH,EAAQV,cACpB,gBAAC,IAAD,CAAOc,KAAK,SACR,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,cACCC,MAAMC,KAAK,CAACC,OAAQR,EAAO,GAAGS,WAAWD,SAAS,SAACE,EAAGC,GAAJ,OAC/C,gBAAC,IAAD,CAAWC,IAAKD,EAAEE,YACd,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,4BAA6BL,QAGrC,gBAAC,IAAD,kBACA,gBAAC,IAAD,iBAGR,gBAAC,IAAD,KACKX,EAAOiB,KAAI,SAACC,EAAOC,EAAOnB,GAAf,OACR,gBAAC,IAAD,CAAUI,UAAWc,EAAME,qBAAuB,GAAM,EAAInB,EAAQR,QAAU,KAAMmB,IAAKM,EAAMG,OAAOR,YAClG,gBAAC,IAAD,KACI,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,4BAA6BE,EAAMG,UAEtCH,EAAMT,WAAWQ,KAAI,SAACC,EAAOC,GAAR,OAClB,gBAAC,IAAD,CAAWP,IAAKO,EAAMN,YAClB,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,yFAA6BE,EAAMG,OAAwBH,EAAME,qBAA0BpB,EAAOG,kBAG1G,gBAAC,IAAD,KACI,gBAAC,EAAAW,WAAD,KAAaC,OAAOC,IAApB,kCAA6BE,EAAME,qBAA0BpB,EAAOG,eAExE,gBAAC,IAAD,KACI,gBAAC,EAAAW,WAAD,KAAaC,OAAOC,IAApB,4BAA6BE,EAAMI,mB,GAvCnCC,aAwDxC,WAAeC,OAAWlC,EAA1B,CAAkCM","file":"145-e28dace4404520c64a8c.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\n\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nconst styles = ({\n    tableWrapper: {\n        overflowX: 'auto',\n    },\n    rowGrey: {\n        backgroundColor: grey[200],\n    },\n});\n\nclass EquivalencePartitionTable extends React.Component {\n    render() {\n        const {states, classes} = this.props;\n        return (\n            <Paper>\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        {states.equivalence}-Distinguishable States\n                    </Typography>\n                </Toolbar>\n                <div className={classes.tableWrapper}>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>State</TableCell>\n                                {Array.from({length: states[0].nextStates.length}, (v, k) =>\n                                    <TableCell key={k.toString()}>\n                                        <InlineMath>{String.raw`X_{${k}}`}</InlineMath>\n                                    </TableCell>\n                                )}\n                                <TableCell>Partition</TableCell>\n                                <TableCell>Output</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {states.map((state, index, states) =>\n                                <TableRow className={state.equivalencePartition % 2 === 1 ? classes.rowGrey : null} key={state.number.toString()}>\n                                    <TableCell>\n                                        <InlineMath>{String.raw`Z_{${state.number}}`}</InlineMath>\n                                    </TableCell>\n                                    {state.nextStates.map((state, index) =>\n                                        <TableCell key={index.toString()}>\n                                            <InlineMath>{String.raw`Z_{${state.number}} \\text{--} K_{${state.equivalencePartition}}^{${states.equivalence}}`}</InlineMath>\n                                        </TableCell>\n                                    )}\n                                    <TableCell>\n                                        <InlineMath>{String.raw`K_{${state.equivalencePartition}}^{${states.equivalence}}`}</InlineMath>\n                                    </TableCell>\n                                    <TableCell>\n                                        <InlineMath>{String.raw`Y_{${state.output}}`}</InlineMath>\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nEquivalencePartitionTable.propTypes = {\n    states: PropTypes.array.isRequired,\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EquivalencePartitionTable);\n"],"sourceRoot":""}