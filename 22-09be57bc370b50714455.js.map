{"version":3,"sources":["webpack://moore-simplification/./src/components/output/StateTransitionTable.js"],"names":["StateTransitionTable","render","this","props","states","classes","variant","className","tableWrapper","size","Array","from","length","nextStates","v","k","key","toString","InlineMath","String","raw","map","state","number","equivalencePartition","index","output","React","withStyles","overflowX"],"mappings":"oRA0BMA,G,qGACFC,OAAA,WACI,MAA0BC,KAAKC,MAAxBC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QACf,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAYC,QAAQ,MAApB,oBAIJ,uBAAKC,UAAWF,EAAQG,cACpB,gBAAC,IAAD,CAAOC,KAAK,SACR,gBAAC,IAAD,KACI,gBAAC,IAAD,KACI,gBAAC,IAAD,cACCC,MAAMC,KAAK,CAACC,OAAQR,EAAO,GAAGS,WAAWD,SAAS,SAACE,EAAGC,GAAJ,OAC/C,gBAAC,IAAD,CAAWC,IAAKD,EAAEE,YACd,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,4BAA6BL,QAGrC,gBAAC,IAAD,iBAGR,gBAAC,IAAD,KACKX,EAAOiB,KAAI,SAAAC,GAAK,OACb,gBAAC,IAAD,CAAUN,IAAKM,EAAMC,OAAON,YACxB,gBAAC,IAAD,KACI,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,6BAA8BE,EAAME,wBAEvCF,EAAMT,WAAWQ,KAAI,SAACC,EAAOG,GAAR,OAClB,gBAAC,IAAD,CAAWT,IAAKS,EAAMR,YAClB,gBAAC,EAAAC,WAAD,KAAaC,OAAOC,IAApB,6BAA8BE,EAAME,2BAG5C,gBAAC,IAAD,KACI,gBAAC,EAAAN,WAAD,KAAaC,OAAOC,IAApB,4BAA6BE,EAAMI,mB,GAnCxCC,cAoDnC,WAAeC,OA1DA,CACXpB,aAAc,CACVqB,UAAW,SAwDnB,CAAkC7B","file":"22-09be57bc370b50714455.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport 'katex/dist/katex.min.css';\nimport {InlineMath} from 'react-katex';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nimport withStyles from '@material-ui/core/styles/withStyles';\n\nimport States from '../../utils/States';\n\nconst styles = {\n    tableWrapper: {\n        overflowX: 'auto',\n    },\n};\n\nclass StateTransitionTable extends React.Component {\n    render() {\n        const {states, classes} = this.props;\n        return (\n            <Paper>\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        Reduced Machine\n                    </Typography>\n                </Toolbar>\n                <div className={classes.tableWrapper}>\n                    <Table size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>State</TableCell>\n                                {Array.from({length: states[0].nextStates.length}, (v, k) =>\n                                    <TableCell key={k.toString()}>\n                                        <InlineMath>{String.raw`X_{${k}}`}</InlineMath>\n                                    </TableCell>\n                                )}\n                                <TableCell>Output</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {states.map(state => (\n                                <TableRow key={state.number.toString()}>\n                                    <TableCell>\n                                        <InlineMath>{String.raw`Z'_{${state.equivalencePartition}}`}</InlineMath>\n                                    </TableCell>\n                                    {state.nextStates.map((state, index) =>\n                                        <TableCell key={index.toString()}>\n                                            <InlineMath>{String.raw`Z'_{${state.equivalencePartition}}`}</InlineMath>\n                                        </TableCell>\n                                    )}\n                                    <TableCell>\n                                        <InlineMath>{String.raw`Y_{${state.output}}`}</InlineMath>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            </Paper>\n        );\n    }\n}\n\nStateTransitionTable.propTypes = {\n    states: PropTypes.array.isRequired,\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(StateTransitionTable);\n"],"sourceRoot":""}